/******************************************************************************
 * NOTICE                                                                     *
 *                                                                            *
 * This software (or technical data) was produced for the U.S. Government     *
 * under contract, and is subject to the Rights in Data-General Clause        *
 * 52.227-14, Alt. IV (DEC 2007).                                             *
 *                                                                            *
 * Copyright 2016 The MITRE Corporation. All Rights Reserved.                 *
 ******************************************************************************/

/******************************************************************************
 * Copyright 2016 The MITRE Corporation                                       *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 *    http://www.apache.org/licenses/LICENSE-2.0                              *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/

package org.mitre.mpf.component.api.detection;

import java.util.HashMap;
import java.util.Map;

/**
 * The output object for an image detection component.  A single job may produce zero, one, or many image locations.
 * Each image location represents a single detection within an image or a frame of a video, including the size and
 * location of the detection and any properties which apply to it.
 */
public class MPFImageLocation {

    private int xLeftUpper;
    private int yLeftUpper;
    private int width;
    private int height;
    private float confidence;
    private Map<String, String> detectionProperties;

    /**
     * Gets the x-coordinate for the upper left-hand corner of this detection.
     * @return The x-coordinate of the upper left-hand corner of the detection
     */
    public int getXLeftUpper() {
        return xLeftUpper;
    }

    /**
     * Gets the y-coordinate for the upper left-hand corner of this detection.
     * @return The y-coordinate of the upper left-hand corner of the detection
     */
    public int getYLeftUpper() {
        return yLeftUpper;
    }

    /**
     * Gets the width of the detection.
     * @return The width of the detection, or 0 if the detection is the entire image.
     */
    public int getWidth() {
        return width;
    }

    /**
     * Gets the height of the detection.
     * @return The height of the detection, or 0 if the detection is the entire image.
     */
    public int getHeight() {
        return height;
    }

    /**
     * Returns confidence level for this image location. Confidence represents the level of certainty about the
     * detection. Higher confidence levels represent a higher degree of certainty.  If no confidence is calculated,
     * this should be set to -1.
     *
     * @return The confidence level of the detection, or -1 if confidence is not calculated.
     */
    public float getConfidence() {
        return confidence;
    }

    /**
     * Gets the map of properties generated by the component for this image location.  These vary depending on the
     * component. Keys should be in all caps.
     *
     * @return  A map of properties for this track.
     */
    public Map<String, String> getDetectionProperties() {
        return detectionProperties;
    }

    /**
     * Constructor for the class.
     *
     * @param xLeftUpper   The x coordinate for the upper left-hand corner of this detection.
     * @param yLeftUpper   The y coordinate for the upper left-hand corner of this detection.
     * @param width        The width of the detection.  If the detection consists of the entire image, use 0.
     * @param height       The height of the detection.  If the detection consists of the entire image, use 0.
     * @param confidence      The confidence level of the detection, or -1 if confidence is not calculated.
     * @param detectionProperties  A map of properties for the component.  Property names should be in all-caps.
     */
    public MPFImageLocation(
        int xLeftUpper,
        int yLeftUpper,
        int width,
        int height,
        float confidence,
        Map<String, String> detectionProperties
    ) {
        this.xLeftUpper = xLeftUpper;
        this.yLeftUpper = yLeftUpper;
        this.width = width;
        this.height = height;
        this.confidence = confidence;
        this.detectionProperties = new HashMap<>();
        if (detectionProperties!=null) {
            this.detectionProperties.putAll(detectionProperties);
        }
    }
}
